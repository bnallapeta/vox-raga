apiVersion: "serving.kserve.io/v1beta1"
kind: "InferenceService"
metadata:
  name: "tts-service-custom"
  namespace: "default"
  annotations:
    sidecar.istio.io/inject: "true"
    serving.kserve.io/deploymentMode: "RawDeployment"
spec:
  predictor:
    containers:
      - name: tts-service
        image: bnracr.azurecr.io/tts-service:latest
        env:
        - name: MODEL_NAME
          # This should match the path in your custom model directory
          value: "my_custom_models/en/my_model/vits"
        - name: MODEL_DEVICE
          value: "cpu"
        - name: MODEL_COMPUTE_TYPE
          value: "float32"
        - name: SERVER_LOG_LEVEL
          value: "info"
        - name: MODEL_DOWNLOAD_ROOT
          value: "/tmp/tts_models"
        - name: USE_CUSTOM_MODEL
          value: "true"
        - name: CUSTOM_MODEL_PATH
          value: "/mnt/models"
        ports:
        - name: http1
          containerPort: 8000
          protocol: TCP
        resources:
          limits:
            cpu: "1"
            memory: 2Gi
          requests:
            cpu: "200m"
            memory: 1Gi
        readinessProbe:
          httpGet:
            path: /ready
            port: http1
          initialDelaySeconds: 180
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: http1
          initialDelaySeconds: 240
          periodSeconds: 20
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: model-cache
          mountPath: "/tmp/tts_models"
        - name: custom-models
          mountPath: "/mnt/models"
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
    volumes:
    - name: model-cache
      emptyDir: {}
    - name: custom-models
      # In a real implementation, this would be replaced with a PVC or other volume
      # containing the custom model files
      persistentVolumeClaim:
        claimName: tts-models-pvc
    imagePullSecrets:
    - name: acr-secret

---
# Example PVC for custom models - you would need to create this and populate it
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tts-models-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard  # Adjust based on your cluster 